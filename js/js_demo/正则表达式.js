// \s:空格
// \S:非空格
// \d : 数字
// \D : 非数字
// \w : 字符 ( 字母 ，数字，下划线_ )
// \W : 非字符例子：是否有不是数字的字符

正则的常用方法
1  test()  :在字符串中查找符合正则的内容，若查找到返回true,反之返回false.
    用法：正则.test(字符串)

var str = '374829348791';
var re = /\D/;
if( re.test(str) ){}

2   search()  ：在字符串搜索符合正则的内容，搜索到就返回出现的位置（从0开始，如果匹配的不只是一个字母，那只会返回第一个字母的位置）， 如果搜索失败就返回 -1
用法：字符串.search(正则)
str.search(re)

3  match()  在字符串中搜索复合规则的内容，搜索成功就返回内容，格式为数组，失败就返回null。
用法： 字符串.match(正则)
量词：+ 至少出现一次 匹配不确定的次数（匹配就是搜索查找的意思）
全局匹配：g——global（正则中默认，只要搜索到复合规则的内容就会结束搜索 ）

4 replace() :查找符合正则的字符串，就替换成对应的字符串。返回替换后的内容。
用法： 字符串.replace(正则,新的字符串/回调函数)（在回调函数中，第一个参数指的是每次匹配成功的字符）
| : 或的意思 。
--------------------------
var str = '2013-6-7';
var re = /(\d+)(-)/g;
str = str.replace(re,function($0,$1,$2){
    return $1 + '.';  //分别返回2013.   6.
});
alert( str ); //2013.6.7
------------------------------
5 exec()方法：和match方法一样，搜索符合规则的内容，并返回内容，格式为数组。
用法：正则.exec(字符串)；
属性：input(代表要匹配的字符串)
[^a] 整体代表一个字符   ：^写在[]里面的话，就代表排除的意思
---------------------------
location.parseUrl=function (path){
    path=decodeURI(path);
    var result = {}, param = /([^#?=&]+)=([^&]+)/ig, match;
    while (( match = param.exec(path)) != null) {
        result[match[1]] = match[2];
    }
    return result;
}
--------------------


正则中的字符
()：，小括号，叫做分组符。就相当于数学里面的括号。















